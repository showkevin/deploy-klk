{"version":3,"sources":["pages/ChatPage/AdminChatPage.jsx"],"names":["useStyles","makeStyles","sectionCommentsStyle","withRouter","history","classes","user","useSelector","state","login","useState","undefined","allChatMessageInfo","setAllChatMessageInfo","replyMessage","setReplyMessage","replyImageUrl","setReplyImageUrl","maxMessageNumber","chat","useEffect","chatMsgRef","limitToLast","on","snapshot","messageUpdate","messageInfo","message","createOn","Date","now","push","set","data","val","sliceData","_","slice","values","forEach","item","rawObj","pickBy","value","key","id","Object","keys","currentSendMsgUser","onMessageDelete","msgId","intervalObject","window","confirm","db","ref","remove","clearInterval","console","log","error","className","section","justify","xs","sm","md","map","index","avatar","avatarUser","title","mediaTitle","event","onChange","e","target","onReply","onUpdate","number","reduxDispatch","chatTypes","enableUpdate","enableImageUpload"],"mappings":"2SAmBMA,EAAYC,YAAWC,KAyIdC,uBAvIO,SAAC,GAAgB,EAAdC,QAAe,IAC9BC,EAAUL,IACRM,EAASC,uBAAY,SAAAC,GAAK,OAAIA,EAAMC,SAApCH,KACR,EAAoDI,wBAASC,GAA7D,mBAAOC,EAAP,KAA2BC,EAA3B,KACA,EAAwCH,mBAAS,IAAjD,mBAAOI,EAAP,KAAqBC,EAArB,KACA,EAA0CL,mBAAS,IAAnD,mBAAOM,EAAP,KAAsBC,EAAtB,KACQC,EAAqBX,uBAAY,SAAAC,GAAK,OAAIA,EAAMW,QAAhDD,iBAERE,qBAAU,WACFC,UAAmCV,IAArBO,GACdG,IAAWC,YAAYJ,GAAkBK,GAAG,SAAS,SAAAC,GACjDC,EAAcD,QAGvB,CAACN,IAEJE,qBAAU,WACN,GAAId,GAAQU,GAAmC,KAAlBA,EAAsB,CAC/C,IAAMU,EAAc,CAChBpB,KAAMA,EACNqB,QAAQ,GAAD,OAAKX,GACZY,SAAUC,KAAKC,OAEnBT,IAAWU,OAAOC,IAAIN,MAE3B,CAACV,IAEJ,IAAMS,EAAgB,SAACD,GACnB,IAAMS,EAAOT,EAASU,MACtB,GAAa,OAATD,QAA0BtB,IAATsB,EAAoB,CAErC,IAAIE,EAAYC,IAAEC,MAAMD,IAAEE,OAAOL,IAAQf,GAGzCiB,EAAUI,SAAQ,SAAAC,GACd,IAAMC,EAASL,IAAEM,OAAOT,GAAM,SAAUU,EAAOC,GAC3C,OAAOD,EAAMf,WAAaY,EAAKZ,YAGnC,GAAIa,EAAQ,CACR,IAAMI,EAAKC,OAAOC,KAAKN,GAAQ,GAC/BD,EAAKK,GAAKA,MAKlB,IAAMG,EAAqBZ,IAAEC,MAAMD,IAAEE,OAAOH,IAAa,GAAG,GAAG7B,KAGtC8B,IAAEC,MAAMD,IAAEE,OAAOH,IAAa,GAAG,GAAGP,SAGzDtB,IAAS0C,GACTjC,EAAgB,IAChBF,EAAsBsB,IAGtBtB,EAAsBsB,KAK5Bc,EAAkB,SAACC,EAAOC,GAC5B,IACI,GAAID,EACiBE,OAAOC,QAAQ,8BAE5BC,IAAGC,IAAH,kBAAkBL,IAASM,SAG3BL,GACAM,cAAcN,QAGlBO,QAAQC,IAAI,mBAElB,MAAOC,GACLF,QAAQC,IAAIC,KAuBpB,OACI,yBAAKC,UAAWxD,EAAQyD,SACpB,kBAAC,IAAD,CAAeC,QAAQ,UACnB,kBAAC,IAAD,CAAUC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GACzB,6BACKtD,EAAqBA,EAAmBuD,KAAI,SAACxB,EAAOyB,GACjD,OACI,kBAAC,IAAD,CACIxB,IAAKwB,EACLC,OAAQC,YAAW3B,EAAMrC,MACzBiE,MAAOC,YAAW7B,GAClBhB,QAASgB,EAAMhB,QACfkB,GAAIF,EAAME,GACV4B,MAAOxB,OAGd,8BACL,kBAAC,IAAD,CACIoB,OAAQC,YAAWhE,GACnBqC,MAAO7B,EACP4D,SAAU,SAACC,GAAQ5D,EAAgB4D,EAAEC,OAAOjC,QAC5CkC,QAxCH,SAAAJ,GAEjB,GAAInE,GAAyB,KAAjBQ,EAAqB,CAC7B,IAAMY,EAAc,CAChBpB,KAAMA,EACNqB,QAASb,EACTc,SAAUC,KAAKC,OAEnBT,IAAWU,OAAOC,IAAIN,KAiCNoD,SA7BF,SAAAL,GAClB,GAAInE,EAAM,CACN,IAAMyE,EAAS7D,EAAmB,EAClC8D,YAAcC,IAAkCF,KA2BhCG,cAAc,EACdjE,iBAAkBA,EAClBkE,mBAAmB,OAKnC,kBAAC,IAAD","file":"static/js/19.ffb2b9f1.chunk.js","sourcesContent":["import _ from 'lodash';\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { chatMsgRef } from \"firebaseUtil/firebase\";\r\n// @material-ui/core components\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n// core components\r\nimport GridContainer from \"components/Grid/GridContainer.js\";\r\nimport GridItem from \"components/Grid/GridItem.js\";\r\nimport ChatMessage from \"components/Chat/ChatMessage\";\r\nimport ChatInput from \"components/Chat/ChatInput\";\r\nimport { avatarUser, mediaTitle } from 'Util/chatUtil';\r\nimport FloatyAssistant from 'components/Assistant/floaty';\r\nimport sectionCommentsStyle from \"assets/jss/material-kit-pro-react/views/blogPostSections/sectionCommentsStyle.js\";\r\nimport { db } from 'firebaseUtil/firebase';\r\nimport { reduxDispatch } from 'redux/store';\r\nimport * as chatTypes from \"redux/module/chatModule/action\"\r\n\r\nconst useStyles = makeStyles(sectionCommentsStyle);\r\n\r\nconst AdminChatPage = ({ history }) => {\r\n    const classes = useStyles();\r\n    const { user } = useSelector(state => state.login);\r\n    const [allChatMessageInfo, setAllChatMessageInfo] = useState(undefined);\r\n    const [replyMessage, setReplyMessage] = useState(\"\");\r\n    const [replyImageUrl, setReplyImageUrl] = useState(\"\");\r\n    const { maxMessageNumber } = useSelector(state => state.chat);    \r\n\r\n    useEffect(() => {\r\n        if (chatMsgRef && maxMessageNumber !== undefined) {\r\n            chatMsgRef.limitToLast(maxMessageNumber).on(\"value\", snapshot => {\r\n                messageUpdate(snapshot);\r\n            });\r\n        }\r\n    }, [maxMessageNumber])\r\n\r\n    useEffect(() => {\r\n        if (user && replyImageUrl && replyImageUrl !== \"\") {\r\n            const messageInfo = {\r\n                user: user,\r\n                message: `${replyImageUrl}`,\r\n                createOn: Date.now()\r\n            }\r\n            chatMsgRef.push().set(messageInfo);\r\n        }\r\n    }, [replyImageUrl])\r\n\r\n    const messageUpdate = (snapshot) => {\r\n        const data = snapshot.val();\r\n        if (data !== null && data !== undefined) {\r\n            // 最多顯示 70 則訊息\r\n            let sliceData = _.slice(_.values(data), -maxMessageNumber);\r\n\r\n            //加入 firebase 參考用 ID\r\n            sliceData.forEach(item => {\r\n                const rawObj = _.pickBy(data, function (value, key) {\r\n                    return value.createOn === item.createOn;\r\n                });\r\n\r\n                if (rawObj) {\r\n                    const id = Object.keys(rawObj)[0];\r\n                    item.id = id;\r\n                }\r\n            });\r\n\r\n            // 最新一則 Po 文的使用者\r\n            const currentSendMsgUser = _.slice(_.values(sliceData), -1)[0].user;\r\n\r\n            // 最新一則 Po 文的訊息 ID (改採用 Po 文時間)\r\n            const currentSendMsgId = _.slice(_.values(sliceData), -1)[0].createOn;\r\n\r\n            // 若最新 Po 文的使用者不是自己(當下登入帳號), 則不要將 Reply Message 清空, 以免尚未回覆的訊息消失\r\n            if (user === currentSendMsgUser) {\r\n                setReplyMessage(\"\");\r\n                setAllChatMessageInfo(sliceData);\r\n            }\r\n            else {\r\n                setAllChatMessageInfo(sliceData);\r\n            }\r\n        }\r\n    }\r\n\r\n    const onMessageDelete = (msgId, intervalObject) => {\r\n        try {\r\n            if (msgId) {\r\n                const isDelete = window.confirm(\"是否刪除?\");\r\n                if (isDelete) {\r\n                    db.ref(`chatMsg/${msgId}`).remove();\r\n                }\r\n\r\n                if (intervalObject) {\r\n                    clearInterval(intervalObject);\r\n                }\r\n            } else {\r\n                console.log(\"msgId not exist\");\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const onReplyClick = event => {\r\n\r\n        if (user && replyMessage !== \"\") {\r\n            const messageInfo = {\r\n                user: user,\r\n                message: replyMessage,\r\n                createOn: Date.now()\r\n            }\r\n            chatMsgRef.push().set(messageInfo);\r\n        }\r\n    }\r\n\r\n    const onUpdateClick = event => {\r\n        if (user) {\r\n            const number = maxMessageNumber + 1;\r\n            reduxDispatch(chatTypes.SET_MAX_MESSAGE_NUMBER, number);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.section}>\r\n            <GridContainer justify=\"center\">\r\n                <GridItem xs={12} sm={8} md={8}>\r\n                    <div>\r\n                        {allChatMessageInfo ? allChatMessageInfo.map((value, index) => {\r\n                            return (\r\n                                <ChatMessage\r\n                                    key={index}\r\n                                    avatar={avatarUser(value.user)}\r\n                                    title={mediaTitle(value)}\r\n                                    message={value.message}\r\n                                    id={value.id}\r\n                                    event={onMessageDelete}\r\n                                />\r\n                            )\r\n                        }) : <div></div>}\r\n                        <ChatInput\r\n                            avatar={avatarUser(user)}\r\n                            value={replyMessage}\r\n                            onChange={(e) => { setReplyMessage(e.target.value) }}\r\n                            onReply={onReplyClick}\r\n                            onUpdate={onUpdateClick}\r\n                            enableUpdate={true}\r\n                            setReplyImageUrl={setReplyImageUrl}\r\n                            enableImageUpload={true}\r\n                        />\r\n                    </div>\r\n                </GridItem>\r\n            </GridContainer>\r\n            <FloatyAssistant></FloatyAssistant>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withRouter(AdminChatPage);"],"sourceRoot":""}