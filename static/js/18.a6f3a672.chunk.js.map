{"version":3,"sources":["Util/chatUtil.js","assets/img/faces/gloria2.jpg","assets/img/faces/jerry.jpg","pages/ChatPage/AdminChatPage.jsx"],"names":["chatFontSize","fontSize","getMessageTimeNotify","utc","localDate","Date","localHr","switchNumber","getHours","localMin","getMinutes","current","now","min","parseInt","hr","toDateString","num","value","toString","length","avatarUser","arg","linda","gloria","carlos","jerry","marc","mediaTitle","user","style","createOn","module","exports","useStyles","makeStyles","sectionCommentsStyle","withRouter","history","classes","useSelector","state","login","useState","undefined","allChatMessageInfo","setAllChatMessageInfo","replyMessage","setReplyMessage","replyImageUrl","setReplyImageUrl","maxMessageNumber","chat","enableAlert","setEnableAlert","alertMessage","setAlertMessage","useEffect","chatMsgRef","limitChatMsgRef","query","limitToLast","onValue","snapshot","messageUpdate","messageInfo","message","data","push","child","DatabaseRef","db","key","update","then","catch","error","console","log","val","sliceData","_","slice","values","forEach","item","rawObj","pickBy","id","Object","keys","currentSendMsgUser","onMessageDelete","msgId","intervalObject","window","confirm","remove","clearInterval","className","section","justify","xs","sm","md","map","index","avatar","title","event","onChange","e","target","onReply","onUpdate","number","reduxDispatch","chatTypes","enableUpdate","enableImageUpload","enable","setEnable"],"mappings":"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","file":"static/js/18.a6f3a672.chunk.js","sourcesContent":["import React from 'react';\r\nimport { carlos, linda } from \"firebaseUtil/user\";\r\nimport marc from \"assets/img/faces/marc.jpg\";\r\nimport gloria from \"assets/img/faces/gloria2.jpg\";\r\nimport jerry from \"assets/img/faces/jerry.jpg\";\r\n\r\nconst chatFontSize = {\r\n    fontSize: '0.7rem'\r\n}\r\n\r\nconst getMessageTimeNotify = (utc) => {\r\n    const localDate = new Date(utc);\r\n    const localHr = switchNumber(localDate.getHours());\r\n    const localMin = switchNumber(localDate.getMinutes());\r\n\r\n    const current = Date.now();\r\n    const diffUtc = parseInt(current - utc, 10);\r\n    const min = (diffUtc / 1000) / 60;\r\n    const hr = min / 60;\r\n    const day = hr / 24;\r\n\r\n    if (min <= 60) {\r\n        // return `${Math.floor(min)} minutes ago`;\r\n        return `${localHr}:${localMin}`;\r\n    } else if (min > 60 && hr <= 24) {\r\n        // return `${Math.floor(hr)} hours ago`;\r\n        // return `${localHr}:${localMin}`;\r\n        return `${localHr}:${localMin} ----- ${localDate.toDateString()}`;\r\n    } else if (hr > 24) {\r\n        // return `${Math.floor(day)} days ago`;\r\n        return `${localHr}:${localMin} ----- ${localDate.toDateString()}`;\r\n    }\r\n\r\n    return min;\r\n}\r\n\r\nconst switchNumber = (num) => {\r\n    const value = num.toString();\r\n    if (value.length === 1) {\r\n        return `0${value}`;\r\n    } else {\r\n        return value;\r\n    }\r\n}\r\n\r\nconst avatarUser = (arg) => {\r\n    if (arg === linda) {\r\n        return gloria;\r\n    } else if (arg === carlos) {\r\n        return jerry;\r\n    } else {\r\n        return marc;\r\n    }\r\n}\r\n\r\nconst mediaTitle = (value) => {\r\n    if (value.user === linda) {\r\n        return (\r\n            <span style={chatFontSize}>\r\n                Karen <small>· {getMessageTimeNotify(value.createOn)} </small>\r\n            </span>\r\n        );\r\n    } else if (value.user === carlos) {\r\n        return (\r\n            <span style={chatFontSize}>\r\n                Kevin <small>· {getMessageTimeNotify(value.createOn)}</small>\r\n            </span>\r\n        );\r\n    } else {\r\n        return (<></>);\r\n    }\r\n}\r\n\r\nexport { mediaTitle, avatarUser }","module.exports = __webpack_public_path__ + \"static/media/gloria2.666943cf.jpg\";","module.exports = __webpack_public_path__ + \"static/media/jerry.2aa27bf0.jpg\";","import _ from 'lodash';\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { chatMsgRef } from \"firebaseUtil/firebase\";\r\n// @material-ui/core components\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n// core components\r\nimport GridContainer from \"components/Grid/GridContainer.js\";\r\nimport GridItem from \"components/Grid/GridItem.js\";\r\nimport ChatMessage from \"components/Chat/ChatMessage\";\r\nimport ChatInput from \"components/Chat/ChatInput\";\r\nimport { avatarUser, mediaTitle } from 'Util/chatUtil';\r\nimport FloatyAssistant from 'components/Assistant/floaty';\r\nimport sectionCommentsStyle from \"assets/jss/material-kit-pro-react/views/blogPostSections/sectionCommentsStyle.js\";\r\nimport { db } from 'firebaseUtil/firebase';\r\nimport { reduxDispatch } from 'redux/store';\r\nimport * as chatTypes from \"redux/module/chatModule/action\"\r\nimport { child, limitToLast, onValue, push, query, ref as DatabaseRef, remove, set, update } from 'firebase/database';\r\nimport { signOut } from 'firebase/auth';\r\nimport { auth } from 'firebaseUtil/firebase';\r\nimport AlertModal from 'components/DialogModal/AlertModal';\r\n\r\nconst useStyles = makeStyles(sectionCommentsStyle);\r\n\r\nconst AdminChatPage = ({ history }) => {\r\n    const classes = useStyles();\r\n    const { user } = useSelector(state => state.login);\r\n    const [allChatMessageInfo, setAllChatMessageInfo] = useState(undefined);\r\n    const [replyMessage, setReplyMessage] = useState(\"\");\r\n    const [replyImageUrl, setReplyImageUrl] = useState(\"\");\r\n    const { maxMessageNumber } = useSelector(state => state.chat);\r\n    const [enableAlert, setEnableAlert] = useState(false);\r\n    const [alertMessage, setAlertMessage] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        if (chatMsgRef && maxMessageNumber !== undefined) {\r\n            const limitChatMsgRef = query(chatMsgRef, limitToLast(maxMessageNumber));\r\n            onValue(limitChatMsgRef, (snapshot) => {\r\n                messageUpdate(snapshot);\r\n            });\r\n        }\r\n    }, [maxMessageNumber])\r\n\r\n    useEffect(() => {\r\n        if (user && replyImageUrl && replyImageUrl !== \"\") {\r\n            const messageInfo = {\r\n                user: user,\r\n                message: `${replyImageUrl}`,\r\n                createOn: Date.now()\r\n            }\r\n\r\n            const newPostKey = push(child(DatabaseRef(db), 'chatMsg')).key;\r\n\r\n            let data = {};\r\n            data[newPostKey] = messageInfo;\r\n\r\n            update(chatMsgRef, data)\r\n                .then(() => {\r\n                    // Data saved successfully!\r\n                })\r\n                .catch((error) => {\r\n                    // The write failed...\r\n                    console.log(error.message);\r\n                    setAlertMessage(error.message);\r\n                    setEnableAlert(true);\r\n                });\r\n        }\r\n    }, [replyImageUrl])\r\n\r\n    const messageUpdate = (snapshot) => {\r\n        const data = snapshot.val();\r\n        if (data !== null && data !== undefined) {\r\n            // 最多顯示 70 則訊息\r\n            let sliceData = _.slice(_.values(data), -maxMessageNumber);\r\n\r\n            //加入 firebase 參考用 ID\r\n            sliceData.forEach(item => {\r\n                const rawObj = _.pickBy(data, function (value, key) {\r\n                    return value.createOn === item.createOn;\r\n                });\r\n\r\n                if (rawObj) {\r\n                    const id = Object.keys(rawObj)[0];\r\n                    item.id = id;\r\n                }\r\n            });\r\n\r\n            // 最新一則 Po 文的使用者\r\n            const currentSendMsgUser = _.slice(_.values(sliceData), -1)[0].user;\r\n\r\n            // 最新一則 Po 文的訊息 ID (改採用 Po 文時間)\r\n            const currentSendMsgId = _.slice(_.values(sliceData), -1)[0].createOn;\r\n\r\n            // 若最新 Po 文的使用者不是自己(當下登入帳號), 則不要將 Reply Message 清空, 以免尚未回覆的訊息消失\r\n            if (user === currentSendMsgUser) {\r\n                setReplyMessage(\"\");\r\n                setAllChatMessageInfo(sliceData);\r\n            }\r\n            else {\r\n                setAllChatMessageInfo(sliceData);\r\n            }\r\n        }\r\n    }\r\n\r\n    const onMessageDelete = (msgId, intervalObject) => {\r\n        try {\r\n            if (msgId) {\r\n                const isDelete = window.confirm(\"是否刪除?\");\r\n                if (isDelete) {\r\n\r\n                    remove(child(DatabaseRef(db), `chatMsg/${msgId}`));\r\n                }\r\n\r\n                if (intervalObject) {\r\n                    clearInterval(intervalObject);\r\n                }\r\n            } else {\r\n                console.log(\"msgId not exist\");\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const onReplyClick = event => {\r\n        if (user && replyMessage !== \"\") {\r\n            const messageInfo = {\r\n                user: user,\r\n                message: replyMessage,\r\n                createOn: Date.now()\r\n            }\r\n\r\n            const newPostKey = push(child(DatabaseRef(db), 'chatMsg')).key;\r\n\r\n            let data = {};\r\n            data[newPostKey] = messageInfo;\r\n\r\n            update(chatMsgRef, data)\r\n                .then(() => {\r\n                    // Data saved successfully!\r\n                    setEnableAlert(false);\r\n                })\r\n                .catch((error) => {\r\n                    // The write failed...\r\n                    console.log(`訊息無法送出`);\r\n                    console.log(error.message);\r\n                    setAlertMessage(\"訊息無法送出\");\r\n                    setEnableAlert(true);\r\n                });\r\n        }\r\n    }\r\n\r\n    const onUpdateClick = event => {\r\n        if (user) {\r\n            const number = maxMessageNumber + 1;\r\n            reduxDispatch(chatTypes.SET_MAX_MESSAGE_NUMBER, number);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.section}>\r\n            <GridContainer justify=\"center\">\r\n                <GridItem xs={12} sm={8} md={8}>\r\n                    <div>\r\n                        {allChatMessageInfo ? allChatMessageInfo.map((value, index) => {\r\n                            return (\r\n                                <ChatMessage\r\n                                    key={value.id !== undefined ? value.id : index}\r\n                                    avatar={avatarUser(value.user)}\r\n                                    title={mediaTitle(value)}\r\n                                    message={value.message}\r\n                                    id={value.id}\r\n                                    event={onMessageDelete}\r\n                                />\r\n                            )\r\n                        }) : <div></div>}\r\n                        <ChatInput\r\n                            avatar={avatarUser(user)}\r\n                            value={replyMessage}\r\n                            onChange={(e) => { setReplyMessage(e.target.value) }}\r\n                            onReply={onReplyClick}\r\n                            onUpdate={onUpdateClick}\r\n                            enableUpdate={true}\r\n                            setReplyImageUrl={setReplyImageUrl}\r\n                            enableImageUpload={true}\r\n                        />\r\n                    </div>\r\n                </GridItem>\r\n            </GridContainer>\r\n            <FloatyAssistant></FloatyAssistant>\r\n            <AlertModal enable={enableAlert} setEnable={setEnableAlert} title={\"Error...\"} message={alertMessage} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withRouter(AdminChatPage);"],"sourceRoot":""}